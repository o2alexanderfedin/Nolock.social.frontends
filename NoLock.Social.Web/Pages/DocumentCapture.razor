@page "/document-capture"
@using NoLock.Social.Core.Camera.Interfaces
@using NoLock.Social.Core.Camera.Models
@using NoLock.Social.Core.OCR.Interfaces
@using NoLock.Social.Core.Identity.Interfaces
@using NoLock.Social.Components.Camera
@using System
@using Microsoft.Extensions.Logging
@using OCRDocumentType = NoLock.Social.Core.OCR.Models.DocumentType
@inject ICameraService CameraService
@inject IOCRService OCRService
@inject ILoginAdapterService LoginService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<DocumentCapture> Logger
@implements IDisposable

<PageTitle>Document Capture</PageTitle>

<div class="container-fluid">
    <h1>Document Capture</h1>
    
    @if (!LoginService.CurrentLoginState.IsLoggedIn)
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i> Please log in to capture documents.
        </div>
    }
    else
    {
        <div class="row">
            <!-- Camera Preview Section -->
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="bi bi-camera"></i> Camera Preview
                        </h5>
                    </div>
                    <div class="card-body">
                        <CameraCapture 
                            PreviewTitle="Document Camera"
                            AutoStart="true"
                            OnImageCaptured="@HandleCameraImageCaptured"
                            OnError="@HandleCameraError" />
                    </div>
                </div>
                
                <!-- Captured Pages -->
                @if (capturedPages.Any())
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-images"></i> Captured Pages (@capturedPages.Count)
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row g-2">
                                @foreach (var (capturedPage, index) in capturedPages.Select((p, i) => (p, i)))
                                {
                                    <div class="col-md-3">
                                        <div class="captured-page-thumbnail">
                                            <img src="@capturedPage.ImageUrl" class="img-fluid" alt="Page @(index + 1)" />
                                            <div class="page-actions">
                                                <span class="badge bg-primary">Page @(index + 1)</span>
                                                <button class="btn btn-sm btn-danger" @onclick="() => RemovePage(index)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Settings Section -->
            <div class="col-lg-4">
                <!-- Camera Selection -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-gear"></i> Camera Settings
                        </h5>
                    </div>
                    <div class="card-body">
@* Camera selection is now handled by CameraCapture component *@
                    </div>
                </div>
                
                <!-- Document Type Selection -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-file-earmark-text"></i> Document Type
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="radio" name="documentType" id="receipt" 
                                   checked="@(selectedDocumentType == OCRDocumentType.Receipt)" 
                                   @onchange="() => selectedDocumentType = OCRDocumentType.Receipt">
                            <label class="form-check-label" for="receipt">
                                <i class="bi bi-receipt"></i> Receipt
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="documentType" id="check" 
                                   checked="@(selectedDocumentType == OCRDocumentType.Check)" 
                                   @onchange="() => selectedDocumentType = OCRDocumentType.Check">
                            <label class="form-check-label" for="check">
                                <i class="bi bi-credit-card"></i> Check
                            </label>
                        </div>
                    </div>
                </div>
                
                <!-- Quality Indicators -->
                @if (lastQualityResult != null)
                {
                    <div class="card mb-3">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-check-circle"></i> Image Quality
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="quality-indicator mb-2">
                                <span>Overall Quality:</span>
                                <div class="progress">
                                    <div class="progress-bar @GetQualityClass(lastQualityResult.OverallScore)" 
                                         style="width: @(lastQualityResult.OverallScore)%">
                                        @lastQualityResult.OverallScore%
                                    </div>
                                </div>
                            </div>
                            <div class="quality-indicator mb-2">
                                <span>Sharpness:</span>
                                <div class="progress">
                                    <div class="progress-bar @GetQualityClass(lastQualityResult.BlurScore * 100)" 
                                         style="width: @(lastQualityResult.BlurScore * 100)%">
                                        @((lastQualityResult.BlurScore * 100).ToString("F0"))%
                                    </div>
                                </div>
                            </div>
                            <div class="quality-indicator">
                                <span>Lighting:</span>
                                <div class="progress">
                                    <div class="progress-bar @GetQualityClass(lastQualityResult.LightingScore * 100)" 
                                         style="width: @(lastQualityResult.LightingScore * 100)%">
                                        @((lastQualityResult.LightingScore * 100).ToString("F0"))%
                                    </div>
                                </div>
                            </div>
                            @if (lastQualityResult.HasIssues)
                            {
                                <div class="alert alert-warning mt-2 mb-0">
                                    <small>
                                        @foreach (var issue in lastQualityResult.Issues)
                                        {
                                            <div>â€¢ @issue</div>
                                        }
                                    </small>
                                </div>
                            }
                        </div>
                    </div>
                }
                
                <!-- Actions -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-lightning"></i> Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        <button class="btn btn-success w-100 mb-2" @onclick="ProcessDocument" 
                                disabled="@(!capturedPages.Any() || isProcessing)">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="bi bi-play-fill"></i> Process Document
                        </button>
                        <button class="btn btn-warning w-100" @onclick="ClearSession" 
                                disabled="@(!capturedPages.Any())">
                            <i class="bi bi-trash"></i> Clear All Pages
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isProcessing;
    private string? errorMessage;
    private string? sessionId;
    private OCRDocumentType selectedDocumentType = OCRDocumentType.Receipt;
    
    private List<CapturedImage> capturedPages = new();
    private ImageQualityResult? lastQualityResult;
    
    private IDisposable? loginStateSubscription;

    protected override void OnInitialized()
    {
        // Subscribe to login state changes
        loginStateSubscription = LoginService.LoginStateChanges
            .Subscribe(change =>
            {
                if (!change.NewState.IsLoggedIn)
                {
                    // Navigate away if logged out
                    Navigation.NavigateTo("/");
                }
            });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }






    private void RemovePage(int index)
    {
        if (index >= 0 && index < capturedPages.Count)
        {
            capturedPages.RemoveAt(index);
            StateHasChanged();
        }
    }

    private void ClearSession()
    {
        capturedPages.Clear();
        lastQualityResult = null;
        StateHasChanged();
    }

    private async Task ProcessDocument()
    {
        if (!capturedPages.Any() || string.IsNullOrEmpty(sessionId))
            return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            // Process each page individually (OCRService expects single images)
            foreach (var capturedPage in capturedPages)
            {
                // Convert base64 to byte array
                var base64Data = capturedPage.ImageData;
                if (base64Data.Contains(","))
                {
                    base64Data = base64Data.Split(',')[1]; // Remove data URL prefix
                }
                var imageBytes = Convert.FromBase64String(base64Data);

                // Create OCR submission request
                var submission = new Core.OCR.Models.OCRSubmissionRequest
                {
                    DocumentType = selectedDocumentType,
                    ImageData = imageBytes
                };

                // Submit for OCR processing
                try
                {
                    await OCRService.SubmitDocumentAsync(submission);
                    // If successful, show success message
                    errorMessage = null;
                }
                catch (HttpRequestException error) when (error.Message.Contains("Failed to fetch"))
                {
                    errorMessage = "OCR service is not accessible due to CORS policy. This is a known limitation when running locally. The OCR service needs to be configured to allow requests from localhost.";
                    Logger.LogError(error, "CORS error calling OCR API: {ErrorMessage}", errorMessage);
                }
                catch (Exception error)
                {
                    errorMessage = $"Error processing document: {error.Message}";
                    Logger.LogError(error, "Error calling OCR API: {ErrorMessage}", errorMessage);
                }
            }
            
            // Only clear session and navigate if there was no error
            if (string.IsNullOrEmpty(errorMessage))
            {
                ClearSession();
                // Navigate to home or results page
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to process document: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }


    private string GetQualityClass(double quality)
    {
        return quality switch
        {
            >= 80 => "bg-success",
            >= 60 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private async Task HandleCameraImageCaptured(CapturedImage capturedImage)
    {
        try
        {
            // Add the captured image to the pages list
            capturedPages.Add(capturedImage);
            
            // Create quality result for display (maintaining original functionality)
            lastQualityResult = new ImageQualityResult
            {
                OverallScore = capturedImage.Quality > 0 ? capturedImage.Quality : 80, // Use component's quality or default
                BlurScore = 0.8, // Default values as in original
                LightingScore = 0.75
            };
            
            // Clear any previous error messages on successful capture
            errorMessage = null;
            
            Logger.LogInformation("Image captured successfully. Total pages: {PageCount}", capturedPages.Count);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to process captured image: {ex.Message}";
            Logger.LogError(ex, "Error processing captured image");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void HandleCameraError(string error)
    {
        // Update error message from camera component
        this.errorMessage = error;
        
        // Reset quality result on error
        lastQualityResult = null;
        
        Logger.LogError("Camera error: {ErrorMessage}", error);
        StateHasChanged();
    }

    public void Dispose()
    {
        loginStateSubscription?.Dispose();
    }
}

<style>
    .camera-container {
        position: relative;
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        background: #000;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .camera-preview {
        width: 100%;
        height: auto;
        display: block;
    }
    
    .camera-controls {
        display: flex;
        gap: 1rem;
        align-items: center;
        justify-content: center;
        flex-wrap: wrap;
    }
    
    .zoom-control {
        min-width: 200px;
    }
    
    .captured-page-thumbnail {
        position: relative;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        overflow: hidden;
    }
    
    .captured-page-thumbnail img {
        width: 100%;
        height: 150px;
        object-fit: cover;
    }
    
    .page-actions {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 0.25rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .quality-indicator {
        margin-bottom: 0.5rem;
    }
    
    .quality-indicator span {
        display: block;
        margin-bottom: 0.25rem;
        font-weight: 500;
    }
</style>