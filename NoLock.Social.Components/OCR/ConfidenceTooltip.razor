@using NoLock.Social.Core.OCR.Models

<div class="confidence-tooltip-wrapper" @onmouseenter="ShowTooltip" @onmouseleave="HideTooltip">
    @ChildContent
    
    @if (IsVisible)
    {
        <div class="confidence-tooltip-container @Position" role="tooltip" id="@TooltipId">
            <div class="confidence-tooltip-content">
                @if (!string.IsNullOrEmpty(Title))
                {
                    <div class="confidence-tooltip-title">
                        @Title
                    </div>
                }
                
                <div class="confidence-tooltip-body">
                    @if (Score.HasValue)
                    {
                        <div class="confidence-tooltip-score">
                            <span class="tooltip-label">Confidence:</span>
                            <span class="tooltip-value @ConfidenceHelper.GetCssClass(Score.Value)">
                                @ConfidenceHelper.FormatAsPercentage(Score.Value)
                            </span>
                        </div>
                        
                        <div class="confidence-tooltip-level">
                            <span class="tooltip-label">Level:</span>
                            <span class="tooltip-value">
                                @ConfidenceHelper.GetConfidenceLevel(Score.Value)
                            </span>
                        </div>
                        
                        <div class="confidence-tooltip-description">
                            @ConfidenceHelper.GetDescription(Score.Value)
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(CustomContent))
                    {
                        <div class="confidence-tooltip-custom">
                            @CustomContent
                        </div>
                    }
                    
                    @if (Details != null && Details.Any())
                    {
                        <div class="confidence-tooltip-details">
                            @foreach (var detail in Details)
                            {
                                <div class="tooltip-detail-item">
                                    <span class="tooltip-detail-label">@detail.Key:</span>
                                    <span class="tooltip-detail-value">@detail.Value</span>
                                </div>
                            }
                        </div>
                    }
                </div>
                
                @if (ShowHelpText)
                {
                    <div class="confidence-tooltip-help">
                        <span class="help-icon">â„¹</span>
                        <span class="help-text">
                            @GetHelpText()
                        </span>
                    </div>
                }
            </div>
            <div class="confidence-tooltip-arrow"></div>
        </div>
    }
</div>

<style>
    .confidence-tooltip-wrapper {
        position: relative;
        display: inline-block;
    }

    .confidence-tooltip-container {
        position: absolute;
        z-index: 1000;
        padding: 0.75rem;
        background-color: #1f2937;
        color: #f9fafb;
        border-radius: 0.5rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        min-width: 200px;
        max-width: 300px;
        animation: tooltipFadeIn 0.2s ease-in-out;
        pointer-events: none;
    }

    @@keyframes tooltipFadeIn {
        from {
            opacity: 0;
            transform: translateY(-5px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Position variants */
    .confidence-tooltip-container.top {
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%);
        margin-bottom: 0.5rem;
    }

    .confidence-tooltip-container.bottom {
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        margin-top: 0.5rem;
    }

    .confidence-tooltip-container.left {
        right: 100%;
        top: 50%;
        transform: translateY(-50%);
        margin-right: 0.5rem;
    }

    .confidence-tooltip-container.right {
        left: 100%;
        top: 50%;
        transform: translateY(-50%);
        margin-left: 0.5rem;
    }

    /* Arrow styling */
    .confidence-tooltip-arrow {
        position: absolute;
        width: 0;
        height: 0;
        border-style: solid;
    }

    .top .confidence-tooltip-arrow {
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        border-width: 6px 6px 0 6px;
        border-color: #1f2937 transparent transparent transparent;
    }

    .bottom .confidence-tooltip-arrow {
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%);
        border-width: 0 6px 6px 6px;
        border-color: transparent transparent #1f2937 transparent;
    }

    .left .confidence-tooltip-arrow {
        left: 100%;
        top: 50%;
        transform: translateY(-50%);
        border-width: 6px 0 6px 6px;
        border-color: transparent transparent transparent #1f2937;
    }

    .right .confidence-tooltip-arrow {
        right: 100%;
        top: 50%;
        transform: translateY(-50%);
        border-width: 6px 6px 6px 0;
        border-color: transparent #1f2937 transparent transparent;
    }

    /* Content styling */
    .confidence-tooltip-title {
        font-weight: 600;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #374151;
    }

    .confidence-tooltip-body {
        font-size: 0.75rem;
    }

    .confidence-tooltip-score,
    .confidence-tooltip-level {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.375rem;
    }

    .tooltip-label {
        color: #9ca3af;
        margin-right: 0.5rem;
    }

    .tooltip-value {
        font-weight: 600;
    }

    .tooltip-value.confidence-high {
        color: #34d399;
    }

    .tooltip-value.confidence-medium {
        color: #fbbf24;
    }

    .tooltip-value.confidence-low {
        color: #f87171;
    }

    .confidence-tooltip-description {
        margin-top: 0.5rem;
        padding-top: 0.5rem;
        border-top: 1px solid #374151;
        color: #d1d5db;
        line-height: 1.4;
    }

    .confidence-tooltip-custom {
        margin-top: 0.5rem;
        color: #e5e7eb;
    }

    .confidence-tooltip-details {
        margin-top: 0.5rem;
        padding-top: 0.5rem;
        border-top: 1px solid #374151;
    }

    .tooltip-detail-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.25rem;
    }

    .tooltip-detail-label {
        color: #9ca3af;
        font-size: 0.7rem;
    }

    .tooltip-detail-value {
        color: #e5e7eb;
        font-size: 0.7rem;
        font-weight: 500;
    }

    .confidence-tooltip-help {
        display: flex;
        align-items: flex-start;
        gap: 0.375rem;
        margin-top: 0.5rem;
        padding-top: 0.5rem;
        border-top: 1px solid #374151;
    }

    .help-icon {
        color: #3b82f6;
        font-size: 0.875rem;
        flex-shrink: 0;
    }

    .help-text {
        color: #9ca3af;
        font-size: 0.7rem;
        line-height: 1.3;
    }

    /* Light theme variant */
    .confidence-tooltip-container.light {
        background-color: #ffffff;
        color: #111827;
        border: 1px solid #e5e7eb;
    }

    .light .confidence-tooltip-title {
        border-bottom-color: #e5e7eb;
    }

    .light .tooltip-label {
        color: #6b7280;
    }

    .light .confidence-tooltip-description {
        border-top-color: #e5e7eb;
        color: #4b5563;
    }

    .light .confidence-tooltip-details {
        border-top-color: #e5e7eb;
    }

    .light .tooltip-detail-label {
        color: #6b7280;
    }

    .light .tooltip-detail-value {
        color: #111827;
    }

    .light .confidence-tooltip-help {
        border-top-color: #e5e7eb;
    }

    .light .help-text {
        color: #6b7280;
    }

    .light.top .confidence-tooltip-arrow {
        border-color: #ffffff transparent transparent transparent;
    }

    .light.bottom .confidence-tooltip-arrow {
        border-color: transparent transparent #ffffff transparent;
    }

    .light.left .confidence-tooltip-arrow {
        border-color: transparent transparent transparent #ffffff;
    }

    .light.right .confidence-tooltip-arrow {
        border-color: transparent #ffffff transparent transparent;
    }
</style>

@code {
    /// <summary>
    /// Child content to wrap with tooltip.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// The confidence score to display.
    /// </summary>
    [Parameter]
    public double? Score { get; set; }

    /// <summary>
    /// Title for the tooltip.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }

    /// <summary>
    /// Custom content to display in the tooltip.
    /// </summary>
    [Parameter]
    public string? CustomContent { get; set; }

    /// <summary>
    /// Additional details to display as key-value pairs.
    /// </summary>
    [Parameter]
    public Dictionary<string, string>? Details { get; set; }

    /// <summary>
    /// Position of the tooltip relative to the element.
    /// </summary>
    [Parameter]
    public string Position { get; set; } = "top";

    /// <summary>
    /// Whether to show help text.
    /// </summary>
    [Parameter]
    public bool ShowHelpText { get; set; } = true;

    /// <summary>
    /// Whether to use light theme.
    /// </summary>
    [Parameter]
    public bool UseLightTheme { get; set; }

    /// <summary>
    /// Delay in milliseconds before showing the tooltip.
    /// </summary>
    [Parameter]
    public int ShowDelay { get; set; } = 200;

    /// <summary>
    /// Delay in milliseconds before hiding the tooltip.
    /// </summary>
    [Parameter]
    public int HideDelay { get; set; }

    private bool IsVisible { get; set; }
    private string TooltipId { get; } = $"tooltip-{Guid.NewGuid():N}";
    private CancellationTokenSource? _showCancellation;
    private CancellationTokenSource? _hideCancellation;

    /// <summary>
    /// Shows the tooltip after the specified delay.
    /// </summary>
    private async Task ShowTooltip()
    {
        _hideCancellation?.Cancel();
        _showCancellation?.Cancel();
        _showCancellation = new CancellationTokenSource();

        try
        {
            await Task.Delay(ShowDelay, _showCancellation.Token);
            IsVisible = true;
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // Cancelled, do nothing
        }
    }

    /// <summary>
    /// Hides the tooltip after the specified delay.
    /// </summary>
    private async Task HideTooltip()
    {
        _showCancellation?.Cancel();
        _hideCancellation?.Cancel();
        _hideCancellation = new CancellationTokenSource();

        try
        {
            await Task.Delay(HideDelay, _hideCancellation.Token);
            IsVisible = false;
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // Cancelled, do nothing
        }
    }

    /// <summary>
    /// Gets the help text based on the confidence level.
    /// </summary>
    private string GetHelpText()
    {
        if (!Score.HasValue)
            return "Confidence score indicates the reliability of OCR extraction.";

        var level = ConfidenceHelper.GetConfidenceLevel(Score.Value);
        return level switch
        {
            ConfidenceLevel.High => "This field was extracted with high confidence and is likely accurate.",
            ConfidenceLevel.Medium => "This field may need review. Consider verifying the extracted value.",
            ConfidenceLevel.Low => "Manual verification is strongly recommended for this field.",
            _ => "Confidence score indicates the reliability of OCR extraction."
        };
    }

    public void Dispose()
    {
        _showCancellation?.Cancel();
        _hideCancellation?.Cancel();
        _showCancellation?.Dispose();
        _hideCancellation?.Dispose();
    }
}