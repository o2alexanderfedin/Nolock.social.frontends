@namespace NoLock.Social.Components.Camera
@using NoLock.Social.Core.Camera.Interfaces
@using NoLock.Social.Core.Camera.Models
@using System
@using Microsoft.Extensions.Logging
@using System.Text.Json
@inject ICameraService CameraService
@inject IJSRuntime JSRuntime
@inject ILogger<CameraCapture> Logger
@implements IDisposable

<div class="camera-capture-component">
        <div class="row">
            <!-- Camera Preview Section -->
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="bi bi-camera"></i> @PreviewTitle
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (isCameraInitialized)
                        {
                            <div class="camera-container">
                                <video id="cameraPreview" class="camera-preview" autoplay></video>
                                <canvas id="captureCanvas" class="d-none"></canvas>
                            </div>
                            
                            <!-- Camera Controls -->
                            <div class="camera-controls mt-3">
                                <button class="btn btn-primary btn-lg" @onclick="CaptureImage" disabled="@isCapturing">
                                    @if (isCapturing)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="bi bi-camera-fill"></i> Capture
                                </button>
                                
                                @if (supportsTorch)
                                {
                                    <button class="btn btn-secondary" @onclick="ToggleTorch">
                                        <i class="bi @(torchEnabled ? "bi-lightbulb-fill" : "bi-lightbulb")"></i> 
                                        @(torchEnabled ? "Torch Off" : "Torch On")
                                    </button>
                                }
                                
                                @if (supportsZoom)
                                {
                                    <div class="zoom-control d-inline-block ms-3">
                                        <label>Zoom: @currentZoom.ToString("F1")x</label>
                                        <input type="range" class="form-range" min="1" max="5" step="0.1" 
                                               value="@currentZoom" @onchange="OnZoomChanged" />
                                    </div>
                                }
                            </div>
                        }
                        else if (isInitializing)
                        {
                            <div class="text-center p-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Initializing camera...</span>
                                </div>
                                <p class="mt-3">Initializing camera...</p>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-circle"></i> @errorMessage
                            </div>
                            <button class="btn btn-primary" @onclick="InitializeCamera">
                                <i class="bi bi-arrow-clockwise"></i> Retry
                            </button>
                        }
                        else
                        {
                            <div class="text-center p-5">
                                <button class="btn btn-primary btn-lg" @onclick="InitializeCamera">
                                    <i class="bi bi-camera"></i> Start Camera
                                </button>
                            </div>
                        }
                    </div>
                </div>
                
            </div>
            
            <!-- Settings Section -->
            <div class="col-lg-4">
                <!-- Camera Selection -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-gear"></i> Camera Settings
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="cameraSelect" class="form-label">Select Camera</label>
                            <select id="cameraSelect" class="form-select" @onchange="OnCameraChanged" disabled="@(!isCameraInitialized)">
                                @if (availableCameras != null)
                                {
                                    @foreach (var camera in availableCameras)
                                    {
                                        <option value="@camera">@camera</option>
                                    }
                                }
                                else
                                {
                                    <option>No cameras available</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                
                
                
            </div>
        </div>
</div>

@code {
    // Component Parameters
    [Parameter] public bool AutoStart { get; set; } = true;
    [Parameter] public string PreviewTitle { get; set; } = "Camera Preview";
    [Parameter] public EventCallback<CapturedImage> OnImageCaptured { get; set; }
    [Parameter] public EventCallback<string> OnError { get; set; }
    
    // Component State
    private bool isInitializing;
    private bool isCameraInitialized;
    private bool isCapturing;
    private string? errorMessage;
    private string? sessionId;
    
    private string[]? availableCameras;
    private Dictionary<string, string> cameraMapping = new();
    private string? selectedCamera;
    
    private bool supportsTorch = false;
    private bool supportsZoom = false;
    private bool torchEnabled;
    private double currentZoom = 1.0;
    
    
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("üîç [SimpleCameraCapture] OnInitializedAsync called - Component lifecycle starting");
        Logger.LogInformation("üìä [SimpleCameraCapture] Parameters - AutoStart: {AutoStart}", AutoStart);
        Logger.LogInformation("üìç [SimpleCameraCapture] Component State - isInitializing: {isInitializing}, isCameraInitialized: {isCameraInitialized}", 
            isInitializing, isCameraInitialized);
        
        try
        {
            await base.OnInitializedAsync();
            Logger.LogInformation("‚úÖ [SimpleCameraCapture] OnInitializedAsync completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "‚ùå [SimpleCameraCapture] Error in OnInitializedAsync");
            throw;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("üé® [SimpleCameraCapture] OnAfterRenderAsync called - firstRender: {firstRender}", firstRender);
        
        if (firstRender)
        {
            Logger.LogInformation("üöÄ [SimpleCameraCapture] First render detected");
            Logger.LogInformation("üìä [SimpleCameraCapture] Render parameters - AutoStart: {AutoStart}", AutoStart);
            
            if (AutoStart)
            {
                Logger.LogInformation("üìπ [SimpleCameraCapture] Conditions met for auto-start (AutoStart=true)");
                Logger.LogInformation("üîÑ [SimpleCameraCapture] Initiating camera initialization...");
                await InitializeCamera();
            }
            else
            {
                Logger.LogInformation("‚è∏Ô∏è [SimpleCameraCapture] Skipping auto-start - AutoStart: {AutoStart}", AutoStart);
            }
        }
        else
        {
            Logger.LogDebug("üîÑ [SimpleCameraCapture] Re-render detected (not first render)");
        }
        
        try
        {
            await base.OnAfterRenderAsync(firstRender);
            Logger.LogDebug("‚úÖ [SimpleCameraCapture] OnAfterRenderAsync completed");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "‚ùå [SimpleCameraCapture] Error in OnAfterRenderAsync");
            throw;
        }
    }
    
    private async Task InitializeCamera()
    {
        Logger.LogInformation("üì∑ [SimpleCameraCapture] InitializeCamera() method called");
        
        try
        {
            Logger.LogInformation("üîß [SimpleCameraCapture] Setting isInitializing=true, clearing errorMessage");
            isInitializing = true;
            errorMessage = null;
            StateHasChanged();
            Logger.LogInformation("üîÑ [SimpleCameraCapture] StateHasChanged() called after setting isInitializing");

            // Check camera permission first
            var permissionStatus = await JSRuntime.InvokeAsync<string>("checkCameraPermission");
            Logger.LogInformation("Camera permission status: {PermissionStatus}", permissionStatus);
            
            // If permission not granted, request it
            if (permissionStatus != "granted")
            {
                var permissionResult = await JSRuntime.InvokeAsync<string>("requestCameraPermission");
                if (permissionResult != "granted")
                {
                    errorMessage = "Camera permission denied. Please grant camera access to use this feature.";
                    await NotifyError(errorMessage);
                    isInitializing = false;
                    StateHasChanged();
                    return;
                }
            }

            // Mark camera as initialized first so the video element gets rendered
            isCameraInitialized = true;
            StateHasChanged();
            
            // Wait a bit for the DOM to update with the video element
            await Task.Delay(100);

            // Set up camera stream using JavaScript interop
            var setupSuccess = await JSRuntime.InvokeAsync<bool>("setupCamera", "cameraPreview", null);
            if (!setupSuccess)
            {
                errorMessage = "Failed to start camera stream. Please check your camera is connected and not in use by another application.";
                await NotifyError(errorMessage);
                isCameraInitialized = false;
                StateHasChanged();
                return;
            }
            
            // Get available cameras
            var cameras = await JSRuntime.InvokeAsync<JsonElement[]>("getAvailableCameras");
            if (cameras != null && cameras.Length > 0)
            {
                cameraMapping.Clear();
                var cameraLabels = new List<string>();
                
                foreach (var camera in cameras)
                {
                    if (camera.TryGetProperty("id", out var idProp) && 
                        camera.TryGetProperty("label", out var labelProp))
                    {
                        var id = idProp.GetString() ?? "";
                        var label = labelProp.GetString() ?? "Camera";
                        cameraMapping[label] = id;
                        cameraLabels.Add(label);
                    }
                }
                
                availableCameras = cameraLabels.ToArray();
                selectedCamera = availableCameras.Length > 0 ? availableCameras[0] : "Default Camera";
            }
            else
            {
                availableCameras = new[] { "Default Camera" };
                selectedCamera = availableCameras[0];
            }

            // Create a simple session ID
            sessionId = Guid.NewGuid().ToString();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to initialize camera: {ex.Message}";
            await NotifyError(errorMessage);
            Logger.LogError(ex, "Failed to initialize camera");
        }
        finally
        {
            isInitializing = false;
            StateHasChanged();
        }
    }
    
    private async Task CaptureImage()
    {
        if (!isCameraInitialized || string.IsNullOrEmpty(sessionId))
            return;

        try
        {
            isCapturing = true;
            StateHasChanged();

            // Capture image using JavaScript interop
            var imageDataUrl = await JSRuntime.InvokeAsync<string>("captureImage", "captureCanvas", "cameraPreview");
            
            if (string.IsNullOrEmpty(imageDataUrl))
            {
                errorMessage = "Failed to capture image.";
                await NotifyError(errorMessage);
                return;
            }

            // Create a simple captured image object
            var capturedImage = new CapturedImage
            {
                Id = Guid.NewGuid().ToString(),
                ImageData = imageDataUrl,
                ImageUrl = imageDataUrl,
                Timestamp = DateTime.UtcNow,
                Quality = 80 // Default quality for now
            };
            
            
            // Notify parent component
            if (OnImageCaptured.HasDelegate)
            {
                await OnImageCaptured.InvokeAsync(capturedImage);
            }
            
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to capture image: {ex.Message}";
            await NotifyError(errorMessage);
            Logger.LogError(ex, "Failed to capture image");
        }
        finally
        {
            isCapturing = false;
            StateHasChanged();
        }
    }
    
    private async Task OnCameraChanged(ChangeEventArgs e)
    {
        if (e.Value != null && isCameraInitialized)
        {
            selectedCamera = e.Value.ToString();
            
            // Get the device ID from the label
            if (!string.IsNullOrEmpty(selectedCamera) && cameraMapping.TryGetValue(selectedCamera, out var deviceId))
            {
                // Switch to the selected camera using its device ID
                await JSRuntime.InvokeVoidAsync("switchCamera", deviceId);
            }
        }
    }
    
    private async Task OnZoomChanged(ChangeEventArgs e)
    {
        if (e.Value != null && double.TryParse(e.Value.ToString(), out var zoom))
        {
            currentZoom = zoom;
            await JSRuntime.InvokeVoidAsync("setZoom", zoom);
        }
    }
    
    private async Task ToggleTorch()
    {
        torchEnabled = !torchEnabled;
        await JSRuntime.InvokeVoidAsync("toggleTorch", torchEnabled);
    }
    
    private async Task StopCamera()
    {
        try
        {
            if (isCameraInitialized)
            {
                await JSRuntime.InvokeVoidAsync("stopCamera");
                isCameraInitialized = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error stopping camera");
        }
    }
    
    private async Task NotifyError(string error)
    {
        if (OnError.HasDelegate)
        {
            await OnError.InvokeAsync(error);
        }
    }
    
    public void Dispose()
    {
        _ = StopCamera();
    }
}

<style>
    .camera-container {
        position: relative;
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        background: #000;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .camera-preview {
        width: 100%;
        height: auto;
        display: block;
    }
    
    .camera-controls {
        display: flex;
        gap: 1rem;
        align-items: center;
        justify-content: center;
        flex-wrap: wrap;
    }
    
    .zoom-control {
        min-width: 200px;
    }
    
    /* Fix dropdown positioning */
    .camera-capture-component .form-select {
        position: relative;
        z-index: 1000;
    }
    
    .camera-capture-component .card-body {
        position: relative;
        z-index: 10;
        overflow: visible;
    }
    
    .camera-capture-component .card {
        overflow: visible;
    }
    
</style>