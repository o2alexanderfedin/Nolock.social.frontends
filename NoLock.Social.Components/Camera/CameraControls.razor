@namespace NoLock.Social.Components.Camera
@using NoLock.Social.Core.Camera.Interfaces
@using NoLock.Social.Core.Camera.Models
@using NoLock.Social.Core.Accessibility.Interfaces
@using System.Text.Json
@implements IAsyncDisposable

@inject ICameraService CameraService
@inject IJSRuntime JSRuntime
@inject IVoiceCommandService VoiceCommandService
@inject IAnnouncementService AnnouncementService

<div class="camera-controls-container" @onkeydown="OnKeyDown" tabindex="-1" data-accessibility-component="camera-controls">
    
    <!-- Voice Command Status Indicator -->
    @if (_isVoiceCommandEnabled && _isVoiceCommandListening)
    {
        <div class="voice-command-indicator position-absolute top-0 start-0 m-2 p-1 bg-info text-white rounded shadow"
             role="status"
             aria-live="polite"
             aria-label="Voice commands active for camera controls"
             style="z-index: 20; font-size: 0.75rem;">
            <i class="bi bi-mic-fill me-1" aria-hidden="true"></i>
            Voice Controls
        </div>
    }
    @if (ShowControls)
    {
        <!-- Camera control buttons -->
        <div class="d-flex justify-content-center align-items-center gap-3 p-3 bg-dark bg-opacity-75 rounded-bottom">
            
            <!-- Torch/Flash Toggle Button -->
            @if (_hasTorchSupport)
            {
                <button type="button" class="btn @(_settings.TorchEnabled ? "btn-warning" : "btn-outline-light") btn-sm rounded-circle p-2"
                        tabindex="0"
                        aria-label="@(_settings.TorchEnabled ? "Turn off torch" : "Turn on torch")"
                        aria-pressed="@_settings.TorchEnabled.ToString().ToLower()"
                        @onclick="ToggleTorch"
                        @onkeydown="OnTorchKeyDown">
                    <i class="bi @(_settings.TorchEnabled ? "bi-lightning-fill" : "bi-lightning") fs-5"></i>
                </button>
            }
            
            <!-- Camera Switch Button -->
            @if (_hasMultipleCameras)
            {
                <button type="button" class="btn btn-outline-light btn-sm rounded-circle p-2"
                        tabindex="0"
                        aria-label="Switch to next camera"
                        @onclick="SwitchCamera"
                        @onkeydown="OnCameraSwitchKeyDown">
                    <i class="bi bi-arrow-repeat fs-5"></i>
                </button>
            }
            
            <!-- Zoom Controls -->
            @if (_hasZoomSupport)
            {
                <div class="d-flex align-items-center gap-2">
                    <!-- Zoom Out Button -->
                    <button type="button" class="btn btn-outline-light btn-sm rounded-circle p-1" style="width: 32px; height: 32px;"
                            tabindex="0"
                            aria-label="Zoom out"
                            @onclick="ZoomOut"
                            @onkeydown="OnZoomOutKeyDown">
                        <i class="bi bi-dash fs-6"></i>
                    </button>
                    
                    <!-- Zoom Slider -->
                    <div class="zoom-slider-container" style="width: 100px;">
                        <input type="range" 
                               class="form-range form-range-sm" 
                               min="1" 
                               max="@_settings.MaxZoom" 
                               step="0.1" 
                               value="@_settings.ZoomLevel"
                               tabindex="0"
                               aria-label="Zoom level: @_settings.ZoomLevel.ToString("F1")"
                               aria-valuemin="1"
                               aria-valuemax="@_settings.MaxZoom"
                               aria-valuenow="@_settings.ZoomLevel"
                               @oninput="OnZoomSliderChanged"
                               @onkeydown="OnZoomSliderKeyDown"
                               style="height: 4px;">
                    </div>
                    
                    <!-- Zoom In Button -->
                    <button type="button" class="btn btn-outline-light btn-sm rounded-circle p-1" style="width: 32px; height: 32px;"
                            tabindex="0"
                            aria-label="Zoom in"
                            @onclick="ZoomIn"
                            @onkeydown="OnZoomInKeyDown">
                        <i class="bi bi-plus fs-6"></i>
                    </button>
                </div>
            }
            
        </div>
    }
</div>

@code {
    [Parameter] public bool ShowControls { get; set; } = true;
    [Parameter] public bool EnableVoiceCommands { get; set; } = true;
    
    // Control state properties
    private CameraControlSettings _settings = new();
    private string[] _availableCameras = Array.Empty<string>();
    private bool _isInitialized = false;
    
    // Capability flags
    private bool _hasTorchSupport = false;
    private bool _hasZoomSupport = false;
    private bool _hasMultipleCameras = false;
    
    // Settings persistence
    private const string SETTINGS_KEY = "nolock_camera_settings";
    
    // Voice command state
    private bool _isVoiceCommandEnabled = false;
    private bool _isVoiceCommandListening = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
        
        // Initialize voice commands if enabled
        if (EnableVoiceCommands)
        {
            await InitializeVoiceCommandsAsync();
        }
        
        await base.OnInitializedAsync();
    }

    // Event handlers
    private async Task ToggleTorch()
    {
        try
        {
            await CameraService.SetTorchAsync(!_settings.TorchEnabled);
            _settings.TorchEnabled = !_settings.TorchEnabled;
            await SaveSettings();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/logging
            Console.WriteLine($"Error toggling torch: {ex.Message}");
        }
    }

    private async Task SwitchCamera()
    {
        try
        {
            await CameraService.SwitchCameraAsync();
            // Camera settings may change when switching cameras
            await RefreshCameraCapabilities();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/logging
            Console.WriteLine($"Error switching camera: {ex.Message}");
        }
    }

    private async Task SetZoom(double zoomLevel)
    {
        try
        {
            // Clamp zoom level to valid range
            var clampedZoom = Math.Max(1.0, Math.Min(_settings.MaxZoom, zoomLevel));
            await CameraService.SetZoomAsync(clampedZoom);
            _settings.ZoomLevel = clampedZoom;
            await SaveSettings();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/logging
            Console.WriteLine($"Error setting zoom: {ex.Message}");
        }
    }

    private async Task ZoomIn()
    {
        var newZoom = Math.Min(_settings.MaxZoom, _settings.ZoomLevel + 0.5);
        await SetZoom(newZoom);
    }

    private async Task ZoomOut()
    {
        var newZoom = Math.Max(1.0, _settings.ZoomLevel - 0.5);
        await SetZoom(newZoom);
    }

    private async Task OnZoomSliderChanged(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var zoomLevel))
        {
            await SetZoom(zoomLevel);
        }
    }

    private async Task RefreshCameraCapabilities()
    {
        // This method will be implemented when we add capability detection
        // For now, it's a placeholder for when camera switches
    }
    
    private async Task SaveSettings()
    {
        try
        {
            var json = JsonSerializer.Serialize(_settings);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", SETTINGS_KEY, json);
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/logging
            Console.WriteLine($"Error saving camera settings: {ex.Message}");
        }
    }
    
    private async Task LoadSettings()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", SETTINGS_KEY);
            if (!string.IsNullOrEmpty(json))
            {
                var savedSettings = JsonSerializer.Deserialize<CameraControlSettings>(json);
                if (savedSettings != null)
                {
                    _settings = savedSettings;
                }
            }
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/logging
            Console.WriteLine($"Error loading camera settings: {ex.Message}");
        }
    }

    // Keyboard event handlers
    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key.ToLower())
        {
            case " ":
            case "spacebar":
                if (_hasTorchSupport)
                {
                    e.PreventDefault();
                    await ToggleTorch();
                }
                break;
            case "+":
            case "=":
            case "arrowup":
                if (_hasZoomSupport)
                {
                    e.PreventDefault();
                    await ZoomIn();
                }
                break;
            case "-":
            case "_":
            case "arrowdown":
                if (_hasZoomSupport)
                {
                    e.PreventDefault();
                    await ZoomOut();
                }
                break;
        }
    }

    private async Task OnTorchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key.ToLower() == " " || e.Key.ToLower() == "enter")
        {
            e.PreventDefault();
            await ToggleTorch();
        }
    }

    private async Task OnCameraSwitchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key.ToLower() == "enter")
        {
            e.PreventDefault();
            await SwitchCamera();
        }
    }

    private async Task OnZoomInKeyDown(KeyboardEventArgs e)
    {
        if (e.Key.ToLower() == "enter" || e.Key.ToLower() == " ")
        {
            e.PreventDefault();
            await ZoomIn();
        }
    }

    private async Task OnZoomOutKeyDown(KeyboardEventArgs e)
    {
        if (e.Key.ToLower() == "enter" || e.Key.ToLower() == " ")
        {
            e.PreventDefault();
            await ZoomOut();
        }
    }

    private async Task OnZoomSliderKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key.ToLower())
        {
            case "arrowup":
            case "arrowright":
            case "+":
            case "=":
                e.PreventDefault();
                await ZoomIn();
                break;
            case "arrowdown":
            case "arrowleft":
            case "-":
            case "_":
                e.PreventDefault();
                await ZoomOut();
                break;
        }
    }
    
    // Voice command initialization and handling
    private async Task InitializeVoiceCommandsAsync()
    {
        try
        {
            // Check if speech recognition is supported
            _isVoiceCommandEnabled = await VoiceCommandService.IsSpeechRecognitionSupportedAsync();
            
            if (!_isVoiceCommandEnabled)
            {
                return;
            }
            
            // Subscribe to voice command events
            VoiceCommandService.OnCommandRecognized += OnVoiceCommandRecognized;
            VoiceCommandService.OnSpeechError += OnVoiceCommandError;
            
            // Configure voice commands for camera control operations
            var commands = new Dictionary<string, Func<Task>>
            {
                // Torch/Flash commands
                ["torch on"] = async () => {
                    if (_hasTorchSupport && !_settings.TorchEnabled)
                        await ToggleTorch();
                },
                ["torch off"] = async () => {
                    if (_hasTorchSupport && _settings.TorchEnabled)
                        await ToggleTorch();
                },
                ["flash on"] = async () => {
                    if (_hasTorchSupport && !_settings.TorchEnabled)
                        await ToggleTorch();
                },
                ["flash off"] = async () => {
                    if (_hasTorchSupport && _settings.TorchEnabled)
                        await ToggleTorch();
                },
                ["toggle torch"] = async () => {
                    if (_hasTorchSupport)
                        await ToggleTorch();
                },
                ["toggle flash"] = async () => {
                    if (_hasTorchSupport)
                        await ToggleTorch();
                },
                
                // Zoom commands
                ["zoom in"] = async () => {
                    if (_hasZoomSupport)
                        await ZoomIn();
                },
                ["zoom out"] = async () => {
                    if (_hasZoomSupport)
                        await ZoomOut();
                },
                ["increase zoom"] = async () => {
                    if (_hasZoomSupport)
                        await ZoomIn();
                },
                ["decrease zoom"] = async () => {
                    if (_hasZoomSupport)
                        await ZoomOut();
                },
                
                // Camera switching commands
                ["switch camera"] = async () => {
                    if (_hasMultipleCameras)
                        await SwitchCamera();
                },
                ["change camera"] = async () => {
                    if (_hasMultipleCameras)
                        await SwitchCamera();
                },
                ["flip camera"] = async () => {
                    if (_hasMultipleCameras)
                        await SwitchCamera();
                }
            };
            
            await VoiceCommandService.SetCommandsAsync(commands);
            
            // Start listening for voice commands
            await VoiceCommandService.StartListeningAsync();
            _isVoiceCommandListening = true;
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing voice commands: {ex.Message}");
            _isVoiceCommandEnabled = false;
            _isVoiceCommandListening = false;
        }
    }
    
    private async void OnVoiceCommandRecognized(object? sender, VoiceCommandEventArgs e)
    {
        try
        {
            await InvokeAsync(async () =>
            {
                await AnnouncementService.AnnouncePoliteAsync(
                    $"Camera control voice command: {e.MatchedCommand}", 
                    AnnouncementCategory.VoiceCommand);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling voice command recognition: {ex.Message}");
        }
    }
    
    private async void OnVoiceCommandError(object? sender, SpeechErrorEventArgs e)
    {
        try
        {
            await InvokeAsync(async () =>
            {
                await AnnouncementService.AnnounceAssertiveAsync(
                    $"Voice command error: {e.ErrorMessage}", 
                    AnnouncementCategory.Error);
                
                // Try to restart listening if it was stopped due to error
                if (_isVoiceCommandEnabled && !await VoiceCommandService.IsListeningAsync())
                {
                    try
                    {
                        await VoiceCommandService.StartListeningAsync();
                        _isVoiceCommandListening = true;
                        StateHasChanged();
                    }
                    catch (Exception restartEx)
                    {
                        Console.WriteLine($"Failed to restart voice command listening: {restartEx.Message}");
                        _isVoiceCommandListening = false;
                        StateHasChanged();
                    }
                }
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling voice command error event: {ex.Message}");
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        try
        {
            // Clean up voice command service
            if (_isVoiceCommandEnabled)
            {
                try
                {
                    VoiceCommandService.OnCommandRecognized -= OnVoiceCommandRecognized;
                    VoiceCommandService.OnSpeechError -= OnVoiceCommandError;
                    
                    if (_isVoiceCommandListening)
                    {
                        await VoiceCommandService.StopListeningAsync();
                    }
                }
                catch (Exception voiceEx)
                {
                    Console.WriteLine($"Error disposing voice command service: {voiceEx.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            // Log error but don't throw during disposal
            Console.WriteLine($"Error during CameraControls disposal: {ex.Message}");
        }
    }
}