@namespace NoLock.Social.Components.Camera
@using NoLock.Social.Core.Camera.Interfaces
@using NoLock.Social.Core.Camera.Models
@using NoLock.Social.Core.Accessibility.Interfaces
@using Microsoft.Extensions.Logging
@implements IAsyncDisposable

@inject ICameraService CameraService
@inject ILogger<DocumentCaptureContainer> Logger
@inject IFocusManagementService FocusManagementService
@inject IAnnouncementService AnnouncementService
@inject IVoiceCommandService VoiceCommandService

<div class="document-capture-container" 
     role="main" 
     aria-label="Document capture workflow"
     data-accessibility-component="document-capture"
     @onkeydown="HandleKeyDown"
     @ref="containerRef"
     tabindex="-1">
    
    <!-- Skip Navigation Links -->
    <nav class="skip-links" aria-label="Skip navigation">
        <a href="#main-content" class="skip-link" @onclick="() => FocusElement(mainContentRef)">
            Skip to main content
        </a>
        <a href="#" class="skip-link" @onclick="ShowKeyboardShortcuts">
            Keyboard shortcuts (F1)
        </a>
    </nav>

    <!-- Keyboard Shortcuts Help Modal -->
    @if (_showKeyboardHelp)
    {
        <div class="modal-backdrop" @onclick="HideKeyboardShortcuts">
            <div class="keyboard-help-modal" 
                 role="dialog" 
                 aria-labelledby="keyboard-help-title"
                 aria-modal="true"
                 @ref="keyboardHelpRef"
                 @onclick:stopPropagation="true">
                <header class="modal-header">
                    <h2 id="keyboard-help-title">Keyboard Shortcuts</h2>
                    <button type="button" 
                            class="btn-close"
                            @onclick="HideKeyboardShortcuts"
                            aria-label="Close keyboard shortcuts help">Ã—</button>
                </header>
                <div class="modal-body">
                    <dl class="keyboard-shortcuts-list">
                        <dt>Ctrl+C or Space</dt>
                        <dd>Capture image</dd>
                        <dt>Ctrl+S</dt>
                        <dd>Start/stop camera</dd>
                        <dt>Ctrl+T</dt>
                        <dd>Toggle torch</dd>
                        <dt>Ctrl+M</dt>
                        <dd>Switch to review mode</dd>
                        <dt>Ctrl+R</dt>
                        <dd>Return to capture mode</dd>
                        <dt>Ctrl+A</dt>
                        <dd>Add new page</dd>
                        <dt>Ctrl+E</dt>
                        <dd>Enhancement mode</dd>
                        <dt>Escape</dt>
                        <dd>Cancel current operation</dd>
                        <dt>Tab / Shift+Tab</dt>
                        <dd>Navigate controls</dd>
                        <dt>F1</dt>
                        <dd>Show this help</dd>
                    </dl>
                </div>
            </div>
        </div>
    }
    
    <!-- Comprehensive live regions for screen reader announcements -->
    <div aria-live="polite" 
         aria-atomic="true" 
         aria-relevant="all"
         class="visually-hidden"
         id="polite-announcements">
        @_politeAnnouncement
    </div>
    
    <div aria-live="assertive" 
         aria-atomic="true" 
         aria-relevant="all"
         class="visually-hidden"
         id="assertive-announcements">
        @_assertiveAnnouncement
    </div>
    
    <!-- Offline Status Indicator -->
    <OfflineStatusIndicator />
    
    <!-- Voice Command Status Indicator -->
    @if (_isVoiceCommandEnabled && _isVoiceCommandListening)
    {
        <div class="voice-command-indicator position-fixed top-0 end-0 m-3 p-2 bg-success text-white rounded shadow"
             role="status"
             aria-live="polite"
             aria-label="Voice commands active">
            <i class="bi bi-mic-fill me-2" aria-hidden="true"></i>
            Voice Commands Active
        </div>
    }
    
    @if (_currentMode == CaptureMode.Capture)
    {
        <section role="region" 
                 aria-label="Document capture mode" 
                 aria-describedby="capture-instructions"
                 id="main-content"
                 @ref="mainContentRef">
            
            <div id="capture-instructions" class="visually-hidden">
                Capture mode: Position document in viewfinder and take photos
            </div>
            
            <MultiPageCameraComponent 
                OnDocumentCompleted="OnDocumentCompleted"
                OnSessionCreated="OnSessionCreated"
                OnImageEnhanced="OnImageEnhancedFromCamera"
                InitialSessionId="@_sessionId" />
                
            @if (_documentSession?.HasPages == true)
            {
                <nav role="navigation" 
                     aria-label="Document capture actions" 
                     class="d-flex justify-content-center gap-3 p-3 border-top">
                    <button type="button" 
                            class="btn btn-outline-secondary btn-lg px-4"
                            @onclick="SwitchToReviewMode"
                            disabled="@_isProcessing"
                            aria-describedby="review-hint">
                        <i class="bi bi-eye me-2" aria-hidden="true"></i>
                        Review Pages (@_documentSession.TotalPages)
                    </button>
                    <div id="review-hint" class="visually-hidden">
                        Switch to review mode to examine captured pages
                    </div>
                </nav>
            }
        </section>
    }
    else if (_currentMode == CaptureMode.Enhancement)
    {
        <section role="region" 
                 aria-label="Image enhancement mode" 
                 aria-describedby="enhancement-instructions"
                 id="main-content"
                 @ref="mainContentRef">
            
            <div id="enhancement-instructions" class="visually-hidden">
                Enhancement mode: Review and improve captured image quality
            </div>
            
            <header class="d-flex justify-content-between align-items-center bg-info text-white p-3 rounded-top"
                    role="banner"
                    aria-label="Enhancement mode header">
                <h5 class="mb-0">
                    <i class="bi bi-magic me-2" aria-hidden="true"></i>
                    Image Enhancement
                </h5>
                <button type="button" 
                        class="btn btn-outline-light btn-sm"
                        @onclick="CancelEnhancement"
                        disabled="@_isProcessing"
                        aria-label="Cancel enhancement and return to capture">
                    <i class="bi bi-x-lg me-2" aria-hidden="true"></i>
                    Cancel
                </button>
            </header>
            
            <main role="main" aria-label="Image enhancement interface">
                @if (_imageToEnhance != null)
                {
                    <EnhancementPreview 
                        OriginalImage="@_imageToEnhance"
                        OnEnhancementCompleted="OnEnhancementCompleted"
                        OnEnhancementCancelled="CancelEnhancement" />
                }
            </main>
        </section>
    }
    else if (_currentMode == CaptureMode.Review)
    {
        <section role="region" 
                 aria-label="Document review mode" 
                 aria-describedby="review-instructions"
                 id="main-content"
                 @ref="mainContentRef">
            
            <div id="review-instructions" class="visually-hidden">
                Review mode: Examine captured pages, reorder, delete, or add more pages
            </div>
            
            <header class="d-flex justify-content-between align-items-center bg-primary text-white p-3 rounded-top"
                    role="banner"
                    aria-label="Review mode header">
                <h5 class="mb-0">
                    <i class="bi bi-file-earmark-text me-2" aria-hidden="true"></i>
                    Document Review
                </h5>
                <button type="button" 
                        class="btn btn-outline-light btn-sm"
                        @onclick="SwitchToCaptureMode"
                        disabled="@_isProcessing"
                        aria-label="Add more pages to document">
                    <i class="bi bi-camera me-2" aria-hidden="true"></i>
                    Add More Pages
                </button>
            </header>
            
            <main role="main" aria-label="Document pages management">
                <PageManagementComponent 
                    DocumentSession="@_documentSession"
                    OnSessionUpdated="OnSessionUpdated" />
            </main>
                
            <nav role="navigation" 
                 aria-label="Document finalization actions"
                 class="d-flex justify-content-center gap-3 p-3 border-top">
                <button type="button" 
                        class="btn btn-outline-secondary btn-lg px-4"
                        @onclick="SwitchToCaptureMode"
                        disabled="@_isProcessing"
                        aria-label="Return to capture mode to add more pages">
                    <i class="bi bi-camera me-2" aria-hidden="true"></i>
                    Add Pages
                </button>
                <button type="button" 
                        class="btn btn-success btn-lg px-4"
                        @onclick="FinalizeDocument"
                        disabled="@(_isProcessing || _documentSession?.HasPages != true)"
                        aria-label="Complete document processing and finalize">
                    <i class="bi bi-check-circle me-2" aria-hidden="true"></i>
                    Finalize Document
                </button>
            </nav>
        </section>
    }

    @if (_isProcessing)
    {
        <div class="d-flex justify-content-center align-items-center p-4"
             role="status"
             aria-live="polite"
             aria-atomic="true"
             aria-label="Processing status">
            <div class="spinner-border text-primary" role="progressbar" aria-label="Processing">
                <span class="visually-hidden">Processing...</span>
            </div>
            <span class="ms-2" id="processing-message">@_processingMessage</span>
        </div>
    }

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger mx-3" 
             role="alert"
             aria-live="assertive"
             aria-atomic="true"
             aria-labelledby="error-heading">
            <i class="bi bi-exclamation-triangle-fill me-2" aria-hidden="true"></i>
            <span id="error-heading" class="visually-hidden">Error:</span>
            @_errorMessage
            <button type="button" 
                    class="btn-close float-end" 
                    @onclick="ClearError"
                    aria-label="Close error message"></button>
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback<CapturedImage[]> OnDocumentFinalized { get; set; }
    [Parameter] public EventCallback OnCancelled { get; set; }
    [Parameter] public string? InitialSessionId { get; set; }
    
    private enum CaptureMode
    {
        Capture,
        Enhancement,
        Review
    }
    
    private CaptureMode _currentMode = CaptureMode.Capture;
    private string? _sessionId;
    private DocumentSession? _documentSession;
    private bool _isProcessing;
    private string _processingMessage = "";
    private string _errorMessage = "";
    private bool _showKeyboardHelp;
    
    // Enhancement mode state
    private CapturedImage? _imageToEnhance;
    private CapturedImage? _enhancedImage;
    
    // Live region announcement messages
    private string _politeAnnouncement = "";
    private string _assertiveAnnouncement = "";
    
    // Voice command state
    private bool _isVoiceCommandEnabled;
    private bool _isVoiceCommandListening;
    
    // Element references for focus management
    private ElementReference containerRef;
    private ElementReference mainContentRef;
    private ElementReference keyboardHelpRef;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Subscribe to announcement service events
            AnnouncementService.OnPoliteAnnouncement += OnPoliteAnnouncement;
            AnnouncementService.OnAssertiveAnnouncement += OnAssertiveAnnouncement;
            
            // Initialize voice commands
            await InitializeVoiceCommandsAsync();
            
            if (!string.IsNullOrEmpty(InitialSessionId))
            {
                _sessionId = InitialSessionId;
                await LoadDocumentSession();
            }
            
            // Announce initial state
            var welcomeMessage = "Document capture interface loaded. Use F1 for keyboard shortcuts.";
            if (_isVoiceCommandEnabled)
            {
                welcomeMessage += " Voice commands are available.";
            }
            await AnnouncementService.AnnouncePoliteAsync(welcomeMessage, AnnouncementCategory.General);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing DocumentCaptureContainer");
            _errorMessage = $"Failed to initialize: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Document capture failed to initialize: {ex.Message}", 
                AnnouncementCategory.Error);
        }
    }
    
    private async Task OnSessionCreated(string sessionId)
    {
        try
        {
            _sessionId = sessionId;
            await LoadDocumentSession();
            Logger.LogInformation("Document session created: {SessionId}", sessionId);
            
            await AnnouncementService.AnnouncePoliteAsync(
                "New document session started", 
                AnnouncementCategory.General);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling session creation");
            _errorMessage = $"Session creation failed: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error creating document session: {ex.Message}", 
                AnnouncementCategory.Error);
        }
    }
    
    private async Task LoadDocumentSession()
    {
        if (string.IsNullOrEmpty(_sessionId))
            return;
            
        try
        {
            _isProcessing = true;
            _processingMessage = "Loading document session...";
            StateHasChanged();
            
            _documentSession = await CameraService.GetDocumentSessionAsync(_sessionId);
            Logger.LogDebug("Loaded document session with {PageCount} pages", _documentSession?.TotalPages ?? 0);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading document session {SessionId}", _sessionId);
            _errorMessage = $"Failed to load session: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error loading document session: {ex.Message}", 
                AnnouncementCategory.Error);
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }
    
    private async Task OnDocumentCompleted(CapturedImage[] pages)
    {
        try
        {
            // Refresh session state after completion
            await LoadDocumentSession();
            
            // Switch to review mode to allow final review
            _currentMode = CaptureMode.Review;
            StateHasChanged();
            
            Logger.LogInformation("Document completed with {PageCount} pages", pages.Length);
            
            await AnnouncementService.AnnouncePoliteAsync(
                $"Document capture completed with {pages.Length} page{(pages.Length != 1 ? "s" : "")}. Switched to review mode.", 
                AnnouncementCategory.PageManagement);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling document completion");
            _errorMessage = $"Error completing document: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error completing document: {ex.Message}", 
                AnnouncementCategory.Error);
        }
    }
    
    private async Task OnSessionUpdated(DocumentSession updatedSession)
    {
        try
        {
            _documentSession = updatedSession;
            StateHasChanged();
            Logger.LogDebug("Session updated, now has {PageCount} pages", updatedSession.TotalPages);
            
            await AnnouncementService.AnnouncePoliteAsync(
                $"Document session updated. Now has {updatedSession.TotalPages} page{(updatedSession.TotalPages != 1 ? "s" : "")}", 
                AnnouncementCategory.PageManagement);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling session update");
            _errorMessage = $"Session update failed: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error updating session: {ex.Message}", 
                AnnouncementCategory.Error);
        }
    }
    
    private async Task SwitchToCaptureMode()
    {
        try
        {
            _currentMode = CaptureMode.Capture;
            _errorMessage = "";
            StateHasChanged();
            
            // Announce mode switch
            await AnnouncementService.AnnouncePoliteAsync(
                "Switched to capture mode. Position document in viewfinder and take photos.", 
                AnnouncementCategory.Navigation);
            
            Logger.LogDebug("Switched to capture mode");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error switching to capture mode");
            _errorMessage = $"Mode switch failed: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error switching to capture mode: {ex.Message}", 
                AnnouncementCategory.Error);
        }
    }
    
    private async Task SwitchToReviewMode()
    {
        try
        {
            if (string.IsNullOrEmpty(_sessionId))
            {
                _errorMessage = "No active session to review";
                return;
            }
            
            // Reload session data to ensure we have latest pages
            await LoadDocumentSession();
            
            _currentMode = CaptureMode.Review;
            _errorMessage = "";
            StateHasChanged();
            
            // Announce mode switch with page count
            var pageCount = _documentSession?.TotalPages ?? 0;
            await AnnouncementService.AnnouncePoliteAsync(
                $"Switched to review mode. {pageCount} page{(pageCount != 1 ? "s" : "")} available for review.", 
                AnnouncementCategory.Navigation);
            
            Logger.LogDebug("Switched to review mode");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error switching to review mode");
            _errorMessage = $"Mode switch failed: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error switching to review mode: {ex.Message}", 
                AnnouncementCategory.Error);
        }
    }
    
    private async Task OnImageEnhancedFromCamera(CapturedImage enhancedImage)
    {
        try
        {
            // When image is enhanced from camera, switch to enhancement mode for preview
            await SwitchToEnhancementMode(enhancedImage);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling image enhancement from camera");
            _errorMessage = $"Enhancement handling failed: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error handling enhancement: {ex.Message}", 
                AnnouncementCategory.Error);
        }
    }
    
    private async Task SwitchToEnhancementMode(CapturedImage imageToEnhance)
    {
        try
        {
            _imageToEnhance = imageToEnhance;
            _enhancedImage = null;
            _currentMode = CaptureMode.Enhancement;
            _errorMessage = "";
            StateHasChanged();
            
            // Announce mode switch
            await AnnouncementService.AnnouncePoliteAsync(
                "Switched to enhancement mode. Review and improve image quality.", 
                AnnouncementCategory.Navigation);
            
            Logger.LogDebug("Switched to enhancement mode");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error switching to enhancement mode");
            _errorMessage = $"Mode switch failed: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error switching to enhancement mode: {ex.Message}", 
                AnnouncementCategory.Error);
        }
    }
    
    private async Task OnEnhancementCompleted(CapturedImage enhancedImage)
    {
        try
        {
            _enhancedImage = enhancedImage;
            
            // Return to capture mode with enhanced image
            _currentMode = CaptureMode.Capture;
            _imageToEnhance = null;
            StateHasChanged();
            
            await AnnouncementService.AnnouncePoliteAsync(
                "Image enhancement completed. Returned to capture mode.", 
                AnnouncementCategory.General);
            
            Logger.LogDebug("Enhancement completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling enhancement completion");
            _errorMessage = $"Enhancement completion failed: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error completing enhancement: {ex.Message}", 
                AnnouncementCategory.Error);
        }
    }
    
    private async Task CancelEnhancement()
    {
        try
        {
            _imageToEnhance = null;
            _enhancedImage = null;
            _currentMode = CaptureMode.Capture;
            _errorMessage = "";
            StateHasChanged();
            
            await AnnouncementService.AnnouncePoliteAsync(
                "Enhancement cancelled. Returned to capture mode.", 
                AnnouncementCategory.Navigation);
            
            Logger.LogDebug("Enhancement cancelled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error cancelling enhancement");
            _errorMessage = $"Enhancement cancellation failed: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error cancelling enhancement: {ex.Message}", 
                AnnouncementCategory.Error);
        }
    }
    
    private async Task FinalizeDocument()
    {
        if (_documentSession?.HasPages != true)
        {
            _errorMessage = "No pages to finalize";
            return;
        }
        
        try
        {
            _isProcessing = true;
            _processingMessage = "Finalizing document...";
            StateHasChanged();
            
            // Convert document session pages to CapturedImage array
            var finalizedPages = _documentSession.Pages.ToArray();
            
            if (OnDocumentFinalized.HasDelegate)
            {
                await OnDocumentFinalized.InvokeAsync(finalizedPages);
            }
            
            Logger.LogInformation("Document finalized with {PageCount} pages", finalizedPages.Length);
            
            await AnnouncementService.AnnouncePoliteAsync(
                $"Document finalized with {finalizedPages.Length} page{(finalizedPages.Length != 1 ? "s" : "")}. Processing complete.", 
                AnnouncementCategory.General);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error finalizing document");
            _errorMessage = $"Finalization failed: {ex.Message}";
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Error finalizing document: {ex.Message}", 
                AnnouncementCategory.Error);
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }
    
    private void ClearError()
    {
        _errorMessage = "";
        StateHasChanged();
    }
    
    // Keyboard shortcuts and focus management
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        try
        {
            // Handle keyboard shortcuts
            bool handled = false;
            
            if (e.Key == "F1")
            {
                await ShowKeyboardShortcuts();
                handled = true;
            }
            else if (e.Key == "Escape")
            {
                if (_showKeyboardHelp)
                {
                    await HideKeyboardShortcuts();
                    handled = true;
                }
                else if (OnCancelled.HasDelegate)
                {
                    await OnCancelled.InvokeAsync();
                    handled = true;
                }
            }
            else if (e.CtrlKey)
            {
                switch (e.Key.ToLowerInvariant())
                {
                    case "c":
                        await TriggerCapture();
                        handled = true;
                        break;
                    case "s":
                        await ToggleCamera();
                        handled = true;
                        break;
                    case "t":
                        await ToggleTorch();
                        handled = true;
                        break;
                    case "m":
                        if (_currentMode == CaptureMode.Capture && _documentSession?.HasPages == true)
                        {
                            await SwitchToReviewMode();
                            handled = true;
                        }
                        break;
                    case "r":
                        if (_currentMode == CaptureMode.Review)
                        {
                            await SwitchToCaptureMode();
                            handled = true;
                        }
                        break;
                    case "a":
                        if (_currentMode == CaptureMode.Review)
                        {
                            await SwitchToCaptureMode();
                            handled = true;
                        }
                        break;
                    case "e":
                        if (_currentMode == CaptureMode.Enhancement)
                        {
                            await CancelEnhancement();
                            handled = true;
                        }
                        break;
                }
            }
            else if (e.Key == " " && !_showKeyboardHelp) // Space for capture (not in help modal)
            {
                await TriggerCapture();
                handled = true;
            }
            
            if (handled)
            {
                Logger.LogDebug("Keyboard shortcut handled: {Key}{Ctrl}", e.Key, e.CtrlKey ? " (Ctrl)" : "");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling keyboard shortcut");
        }
    }
    
    private async Task ShowKeyboardShortcuts()
    {
        try
        {
            _showKeyboardHelp = true;
            StateHasChanged();
            
            // Set focus trap when modal is shown
            await Task.Delay(50); // Allow DOM to update
            await FocusManagementService.TrapFocusAsync(keyboardHelpRef);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error showing keyboard shortcuts");
        }
    }
    
    private async Task HideKeyboardShortcuts()
    {
        try
        {
            await FocusManagementService.ReleaseFocusTrapAsync();
            _showKeyboardHelp = false;
            StateHasChanged();
            
            // Return focus to container
            await Task.Delay(50);
            await FocusManagementService.SetFocusAsync(containerRef);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error hiding keyboard shortcuts");
        }
    }
    
    private async Task FocusElement(ElementReference element)
    {
        try
        {
            await FocusManagementService.SetFocusAsync(element);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error setting focus to element");
        }
    }
    
    // Camera control methods (placeholder - actual implementation depends on camera component)
    private async Task TriggerCapture()
    {
        try
        {
            // This would need to communicate with the camera component
            // For now, just log the action
            Logger.LogDebug("Capture triggered via keyboard shortcut");
            await AnnouncementService.AnnouncePoliteAsync(
                "Capture triggered via keyboard shortcut", 
                AnnouncementCategory.CameraOperation);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error triggering capture");
        }
    }
    
    private async Task ToggleCamera()
    {
        try
        {
            Logger.LogDebug("Camera toggle triggered via keyboard shortcut");
            await AnnouncementService.AnnouncePoliteAsync(
                "Camera toggled via keyboard shortcut", 
                AnnouncementCategory.CameraOperation);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling camera");
        }
    }
    
    private async Task ToggleTorch()
    {
        try
        {
            Logger.LogDebug("Torch toggle triggered via keyboard shortcut");
            await AnnouncementService.AnnouncePoliteAsync(
                "Torch toggled via keyboard shortcut", 
                AnnouncementCategory.CameraOperation);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling torch");
        }
    }
    
    // Event handlers for announcement service
    private void OnPoliteAnnouncement(object? sender, AnnouncementEventArgs e)
    {
        _politeAnnouncement = e.Message;
        InvokeAsync(StateHasChanged);
    }
    
    private void OnAssertiveAnnouncement(object? sender, AnnouncementEventArgs e)
    {
        _assertiveAnnouncement = e.Message;
        InvokeAsync(StateHasChanged);
    }
    
    // Voice command initialization and handling
    private async Task InitializeVoiceCommandsAsync()
    {
        try
        {
            // Check if speech recognition is supported
            _isVoiceCommandEnabled = await VoiceCommandService.IsSpeechRecognitionSupportedAsync();
            
            if (!_isVoiceCommandEnabled)
            {
                Logger.LogInformation("Voice commands not supported on this browser");
                return;
            }
            
            // Subscribe to voice command events
            VoiceCommandService.OnCommandRecognized += OnVoiceCommandRecognized;
            VoiceCommandService.OnSpeechError += OnVoiceCommandError;
            
            // Configure voice commands for camera operations
            var commands = new Dictionary<string, Func<Task>>
            {
                // Capture commands
                ["capture"] = TriggerCapture,
                ["take photo"] = TriggerCapture,
                ["snap"] = TriggerCapture,
                ["shoot"] = TriggerCapture,
                
                // Mode switching commands
                ["review mode"] = async () => {
                    if (_currentMode == CaptureMode.Capture && _documentSession?.HasPages == true)
                        await SwitchToReviewMode();
                },
                ["capture mode"] = async () => {
                    if (_currentMode == CaptureMode.Review)
                        await SwitchToCaptureMode();
                },
                ["add more pages"] = async () => {
                    if (_currentMode == CaptureMode.Review)
                        await SwitchToCaptureMode();
                },
                
                // Document finalization
                ["finalize document"] = async () => {
                    if (_currentMode == CaptureMode.Review && _documentSession?.HasPages == true)
                        await FinalizeDocument();
                },
                ["complete document"] = async () => {
                    if (_currentMode == CaptureMode.Review && _documentSession?.HasPages == true)
                        await FinalizeDocument();
                },
                
                // Help and shortcuts
                ["show shortcuts"] = async () => await ShowKeyboardShortcuts(),
                ["help"] = async () => await ShowKeyboardShortcuts(),
                
                // Enhancement commands
                ["enhancement mode"] = async () => {
                    // Enhancement mode is triggered by image capture workflow
                    // This is a placeholder for voice command recognition
                },
                ["cancel enhancement"] = async () => {
                    if (_currentMode == CaptureMode.Enhancement)
                        await CancelEnhancement();
                },
                
                // Cancel operations
                ["cancel"] = async () => {
                    if (_showKeyboardHelp)
                        await HideKeyboardShortcuts();
                    else if (_currentMode == CaptureMode.Enhancement)
                        await CancelEnhancement();
                    else if (OnCancelled.HasDelegate)
                        await OnCancelled.InvokeAsync();
                }
            };
            
            await VoiceCommandService.SetCommandsAsync(commands);
            
            // Start listening for voice commands
            await VoiceCommandService.StartListeningAsync();
            _isVoiceCommandListening = true;
            
            Logger.LogInformation("Voice commands initialized successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing voice commands");
            _isVoiceCommandEnabled = false;
            _isVoiceCommandListening = false;
        }
    }
    
    private async void OnVoiceCommandRecognized(object? sender, VoiceCommandEventArgs e)
    {
        try
        {
            Logger.LogDebug("Voice command recognized: {Command} (confidence: {Confidence})", 
                e.MatchedCommand, e.Confidence);
            
            await AnnouncementService.AnnouncePoliteAsync(
                $"Voice command recognized: {e.MatchedCommand}", 
                AnnouncementCategory.VoiceCommand);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling voice command recognition");
        }
    }
    
    private async void OnVoiceCommandError(object? sender, SpeechErrorEventArgs e)
    {
        try
        {
            Logger.LogWarning("Voice command error: {ErrorCode} - {ErrorMessage}", 
                e.ErrorCode, e.ErrorMessage);
            
            await AnnouncementService.AnnounceAssertiveAsync(
                $"Voice command error: {e.ErrorMessage}", 
                AnnouncementCategory.Error);
            
            // Try to restart listening if it was stopped due to error
            if (_isVoiceCommandEnabled && !await VoiceCommandService.IsListeningAsync())
            {
                try
                {
                    await VoiceCommandService.StartListeningAsync();
                    _isVoiceCommandListening = true;
                    StateHasChanged();
                }
                catch (Exception restartEx)
                {
                    Logger.LogError(restartEx, "Failed to restart voice command listening");
                    _isVoiceCommandListening = false;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling voice command error event");
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        try
        {
            // Unsubscribe from announcement service events
            AnnouncementService.OnPoliteAnnouncement -= OnPoliteAnnouncement;
            AnnouncementService.OnAssertiveAnnouncement -= OnAssertiveAnnouncement;
            
            // Cleanup voice command service
            if (_isVoiceCommandEnabled)
            {
                try
                {
                    VoiceCommandService.OnCommandRecognized -= OnVoiceCommandRecognized;
                    VoiceCommandService.OnSpeechError -= OnVoiceCommandError;
                    
                    if (_isVoiceCommandListening)
                    {
                        await VoiceCommandService.StopListeningAsync();
                    }
                }
                catch (Exception voiceEx)
                {
                    Logger.LogError(voiceEx, "Error disposing voice command service");
                }
            }
            
            // Release any active focus trap
            await FocusManagementService.ReleaseFocusTrapAsync();
            
            // Clean up the document session
            if (!string.IsNullOrEmpty(_sessionId))
            {
                Logger.LogDebug("Disposing document session {SessionId}", _sessionId);
                await CameraService.ClearDocumentSessionAsync(_sessionId);
            }
        }
        catch (Exception ex)
        {
            // Log error but don't throw during disposal
            Logger.LogError(ex, "Error during DocumentCaptureContainer disposal");
        }
    }
}