@namespace NoLock.Social.Components.Camera
@using NoLock.Social.Core.Camera.Interfaces
@using NoLock.Social.Core.Camera.Models
@using NoLock.Social.Components.Camera
@using Microsoft.AspNetCore.Components
@implements IAsyncDisposable

@inject ICameraService CameraService

<div class="multi-page-camera-container">
    <!-- Page Counter Header -->
    <div class="d-flex justify-content-between align-items-center bg-primary text-white p-3 rounded-top">
        <h5 class="mb-0">
            <i class="bi bi-file-earmark-text me-2"></i>
            Multi-Page Document
        </h5>
        <div class="page-counter">
            <span class="badge bg-light text-dark fs-6">
                Page @(CurrentPageNumber) of @TotalPages
            </span>
        </div>
    </div>

    <!-- Camera Preview -->
    <CameraPreview 
        OnImageAccepted="OnImageCaptured" />

    <!-- Action Buttons -->
    @if (HasCapturedPages)
    {
        <div class="d-flex justify-content-center gap-3 p-3 bg-light border-top">
            <button type="button" 
                    class="btn btn-outline-primary btn-lg px-4"
                    title="Add Another Page"
                    @onclick="AddAnotherPage">
                <i class="bi bi-plus-circle me-2"></i>
                Add Page
            </button>
            <button type="button" 
                    class="btn btn-success btn-lg px-4"
                    title="Complete Document"
                    @onclick="CompleteDocument">
                <i class="bi bi-check-circle me-2"></i>
                Complete (@TotalPages pages)
            </button>
        </div>
    }

    @if (IsLoading)
    {
        <div class="d-flex justify-content-center align-items-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Processing...</span>
            </div>
            <span class="ms-2">@LoadingMessage</span>
        </div>
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mx-3" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @ErrorMessage
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback<CapturedImage[]> OnDocumentCompleted { get; set; }
    [Parameter] public EventCallback<string> OnSessionCreated { get; set; }
    [Parameter] public string? InitialSessionId { get; set; }
    
    private string? _sessionId;
    private CapturedImage[] _capturedPages = Array.Empty<CapturedImage>();
    private bool IsLoading = false;
    private string? ErrorMessage;
    private string LoadingMessage = "";
    
    private int TotalPages => _capturedPages.Length;
    private int CurrentPageNumber => TotalPages + 1;
    private bool HasCapturedPages => TotalPages > 0;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Use existing session or create new one
            if (!string.IsNullOrEmpty(InitialSessionId))
            {
                _sessionId = InitialSessionId;
                await LoadExistingPages();
            }
            else
            {
                await CreateNewSession();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to initialize document session: {ex.Message}";
        }
    }
    
    private async Task CreateNewSession()
    {
        try
        {
            IsLoading = true;
            LoadingMessage = "Creating document session...";
            StateHasChanged();
            
            _sessionId = await CameraService.CreateDocumentSessionAsync();
            
            if (OnSessionCreated.HasDelegate)
            {
                await OnSessionCreated.InvokeAsync(_sessionId);
            }
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadExistingPages()
    {
        if (string.IsNullOrEmpty(_sessionId))
            return;
            
        try
        {
            IsLoading = true;
            LoadingMessage = "Loading existing pages...";
            StateHasChanged();
            
            _capturedPages = await CameraService.GetSessionPagesAsync(_sessionId);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task OnImageCaptured(CapturedImage capturedImage)
    {
        if (string.IsNullOrEmpty(_sessionId))
        {
            ErrorMessage = "No active document session";
            return;
        }
        
        try
        {
            IsLoading = true;
            LoadingMessage = $"Adding page {CurrentPageNumber}...";
            ErrorMessage = null;
            StateHasChanged();
            
            // Add page to session
            await CameraService.AddPageToSessionAsync(_sessionId, capturedImage);
            
            // Refresh pages list
            await LoadExistingPages();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to add page: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task AddAnotherPage()
    {
        // This method prepares the camera for capturing another page
        // The actual capture happens through the CameraPreview component
        ErrorMessage = null;
        StateHasChanged();
    }
    
    private async Task CompleteDocument()
    {
        if (!HasCapturedPages)
        {
            ErrorMessage = "No pages captured yet";
            return;
        }
        
        try
        {
            IsLoading = true;
            LoadingMessage = "Completing document...";
            StateHasChanged();
            
            if (OnDocumentCompleted.HasDelegate)
            {
                await OnDocumentCompleted.InvokeAsync(_capturedPages);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to complete document: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        // Clean up the document session if needed
        if (!string.IsNullOrEmpty(_sessionId))
        {
            try
            {
                // Note: We don't automatically clear the session here as it might be used elsewhere
                // The parent component should handle session cleanup if needed
            }
            catch (Exception ex)
            {
                // Log error but don't throw during disposal
                Console.Error.WriteLine($"Error during MultiPageCameraComponent disposal: {ex.Message}");
            }
        }
    }
}