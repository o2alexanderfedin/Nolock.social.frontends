@namespace NoLock.Social.Components.Camera
@using NoLock.Social.Core.Camera.Models

<style>
    .viewfinder-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 10;
    }
    
    .viewfinder-container {
        position: relative;
        width: 100%;
        height: 100%;
        background: radial-gradient(ellipse at center, 
                    transparent 30%, 
                    rgba(0, 0, 0, 0.3) 100%);
    }
    
    .viewfinder-svg {
        position: absolute;
        top: 0;
        left: 0;
    }
    
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }
</style>

<div class="viewfinder-overlay" data-accessibility-component="viewfinder">
    <div class="viewfinder-container">
        <svg class="viewfinder-svg"
             role="img"
             aria-label="Document viewfinder for @DocumentType scanning"
             aria-describedby="viewfinder-description"
             width="100%"
             height="100%"
             viewBox="0 0 100 100"
             preserveAspectRatio="xMidYMid meet">
            
            <desc id="viewfinder-description">
                @GetViewfinderDescription()
            </desc>
            
            <g class="viewfinder-guides" 
               role="group" 
               aria-label="Document positioning guides">
                <!-- Top-left corner guide -->
                <path d="@GetTopLeftPath()"
                      stroke="@GetStrokeColor()"
                      stroke-width="2"
                      fill="none"
                      stroke-linecap="round"
                      aria-label="Top-left corner guide" />
                
                <!-- Top-right corner guide -->
                <path d="@GetTopRightPath()"
                      stroke="@GetStrokeColor()"
                      stroke-width="2"
                      fill="none"
                      stroke-linecap="round"
                      aria-label="Top-right corner guide" />
                
                <!-- Bottom-left corner guide -->
                <path d="@GetBottomLeftPath()"
                      stroke="@GetStrokeColor()"
                      stroke-width="2"
                      fill="none"
                      stroke-linecap="round"
                      aria-label="Bottom-left corner guide" />
                
                <!-- Bottom-right corner guide -->
                <path d="@GetBottomRightPath()"
                      stroke="@GetStrokeColor()"
                      stroke-width="2"
                      fill="none"
                      stroke-linecap="round"
                      aria-label="Bottom-right corner guide" />
            </g>
        </svg>
        <!-- Detection status announcements -->
        <div aria-live="polite" 
             aria-atomic="true" 
             aria-label="Document detection status"
             class="sr-only">
            @GetDetectionStatusMessage()
        </div>
        
        <!-- Feedback state announcements -->
        <div aria-live="polite" 
             aria-atomic="true" 
             aria-label="Visual feedback state"
             class="sr-only">
            @GetFeedbackStateMessage()
        </div>
    </div>
</div>

@code {
    [Parameter]
    public DocumentType DocumentType { get; set; } = DocumentType.Generic;
    
    [Parameter]
    public bool IsDetecting { get; set; }
    
    [Parameter]
    public bool IsValid { get; set; }
    
    private string GetStrokeColor()
    {
        if (IsValid)
            return "#4ade80"; // Green when valid
        else if (IsDetecting)
            return "#fb923c"; // Orange when detecting
        else
            return "#ffffff"; // White default
    }
    
    private string GetViewfinderDescription()
    {
        var (left, top, right, bottom) = GetGuidePositions();
        return $"Viewfinder overlay with corner guides for {DocumentType} positioning. " +
               $"Guides are positioned at coordinates: top-left ({left}, {top}), " +
               $"top-right ({right}, {top}), bottom-left ({left}, {bottom}), " +
               $"bottom-right ({right}, {bottom}).";
    }
    
    private string GetDetectionStatusMessage()
    {
        if (IsValid)
            return $"Document detected in frame";
        else if (IsDetecting)
            return $"Scanning for {DocumentType}";
        else
            return "";
    }
    
    private string GetFeedbackStateMessage()
    {
        var color = GetStrokeColor();
        return color switch
        {
            "#4ade80" => "Visual feedback: Green - Ready to capture",
            "#fb923c" => "Visual feedback: Orange - Document detecting",
            "#ffffff" => "Visual feedback: White - Position document",
            _ => ""
        };
    }
    
    private string GetAccessibilityMessage()
    {
        if (IsValid)
            return $"{DocumentType} detected successfully. Ready to capture.";
        else if (IsDetecting)
            return $"Detecting {DocumentType}. Please hold steady.";
        else
            return $"Position {DocumentType} within the viewfinder guides.";
    }
    
    private (int left, int top, int right, int bottom) GetGuidePositions()
    {
        return DocumentType switch
        {
            DocumentType.Passport => (20, 25, 80, 75),      // 125x88mm ratio
            DocumentType.DriversLicense => (15, 30, 85, 70), // Credit card ratio
            DocumentType.IDCard => (15, 30, 85, 70),         // Credit card ratio
            _ => (15, 10, 85, 90)                            // Full frame for Generic/Receipt
        };
    }
    
    private string GetTopLeftPath()
    {
        var (left, top, _, _) = GetGuidePositions();
        return $"M {left} {top} L {left} {top + 10} M {left} {top} L {left + 10} {top}";
    }
    
    private string GetTopRightPath()
    {
        var (_, top, right, _) = GetGuidePositions();
        return $"M {right - 10} {top} L {right} {top} M {right} {top} L {right} {top + 10}";
    }
    
    private string GetBottomLeftPath()
    {
        var (left, _, _, bottom) = GetGuidePositions();
        return $"M {left} {bottom} L {left} {bottom - 10} M {left} {bottom} L {left + 10} {bottom}";
    }
    
    private string GetBottomRightPath()
    {
        var (_, _, right, bottom) = GetGuidePositions();
        return $"M {right} {bottom} L {right} {bottom - 10} M {right} {bottom} L {right - 10} {bottom}";
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}