@namespace NoLock.Social.Components.Camera
@using NoLock.Social.Core.Camera.Models
@using Microsoft.AspNetCore.Components

@if (QualityResult != null)
{
    <div class="image-quality-feedback p-3 border rounded"
         role="region"
         aria-label="Image quality assessment"
         aria-describedby="quality-summary"
         data-accessibility-component="image-quality">
        
        <!-- Live region for quality announcements -->
        <div aria-live="polite" 
             aria-atomic="true" 
             aria-label="Quality assessment updates"
             class="visually-hidden">
            @GetQualityAnnouncement()
        </div>
        
        <!-- Overall Quality Score -->
        <div class="mb-3">
            <h6 class="mb-2" id="quality-heading">
                <i class="bi bi-check-circle" aria-hidden="true"></i> Overall Quality
            </h6>
            <div class="d-flex align-items-center">
                <div class="progress flex-grow-1 me-2" 
                     style="height: 20px;"
                     aria-labelledby="quality-heading">
                    <div class="progress-bar @GetScoreColorClass(QualityResult.OverallScore)" 
                         role="progressbar" 
                         style="width: @(QualityResult.OverallScore)%"
                         aria-valuenow="@QualityResult.OverallScore" 
                         aria-valuemin="0" 
                         aria-valuemax="100"
                         aria-label="Overall quality score: @QualityResult.OverallScore percent, @GetOverallQualityLabel(QualityResult.OverallScore)">
                    </div>
                </div>
                <span class="badge @GetScoreBadgeClass(QualityResult.OverallScore)"
                      aria-label="@GetOverallQualityLabel(QualityResult.OverallScore)">
                    @QualityResult.OverallScore%
                </span>
            </div>
        </div>

        <!-- Individual Metrics -->
        <div class="row mb-3" 
             role="group" 
             aria-labelledby="metrics-heading">
            <h6 id="metrics-heading" class="visually-hidden">Quality Metrics Breakdown</h6>
            
            <div class="col-4">
                <small class="text-muted d-block">
                    <i class="bi bi-eye" aria-hidden="true"></i> Sharpness
                </small>
                <span class="badge @GetMetricBadgeClass(QualityResult.BlurScore)"
                      role="status"
                      aria-label="Sharpness quality: @GetMetricLabel(QualityResult.BlurScore)">
                    @GetMetricLabel(QualityResult.BlurScore)
                </span>
            </div>
            <div class="col-4">
                <small class="text-muted d-block">
                    <i class="bi bi-sun" aria-hidden="true"></i> Lighting
                </small>
                <span class="badge @GetMetricBadgeClass(QualityResult.LightingScore)"
                      role="status"
                      aria-label="Lighting quality: @GetMetricLabel(QualityResult.LightingScore)">
                    @GetMetricLabel(QualityResult.LightingScore)
                </span>
            </div>
            <div class="col-4">
                <small class="text-muted d-block">
                    <i class="bi bi-vector-pen" aria-hidden="true"></i> Edges
                </small>
                <span class="badge @GetMetricBadgeClass(QualityResult.EdgeDetectionScore)"
                      role="status"
                      aria-label="Edge detection quality: @GetMetricLabel(QualityResult.EdgeDetectionScore)">
                    @GetMetricLabel(QualityResult.EdgeDetectionScore)
                </span>
            </div>
        </div>

        <!-- Issues List -->
        @if (QualityResult.HasIssues)
        {
            <div class="mb-3" 
                 role="region" 
                 aria-labelledby="issues-heading"
                 aria-live="polite">
                <h6 class="text-warning mb-2" id="issues-heading">
                    <i class="bi bi-exclamation-triangle" aria-hidden="true"></i> 
                    Issues Detected (@QualityResult.Issues.Count)
                </h6>
                <ul class="list-unstyled mb-0" 
                    role="list"
                    aria-label="Quality issues found">
                    @foreach (var issue in QualityResult.Issues)
                    {
                        <li class="text-warning small" role="listitem">
                            <i class="bi bi-dot" aria-hidden="true"></i> @issue
                        </li>
                    }
                </ul>
            </div>
        }

        <!-- Suggestions List -->
        @if (QualityResult.Suggestions.Any())
        {
            <div class="mb-0" 
                 role="region" 
                 aria-labelledby="suggestions-heading"
                 aria-live="polite">
                <h6 class="text-info mb-2" id="suggestions-heading">
                    <i class="bi bi-lightbulb" aria-hidden="true"></i> 
                    Improvement Suggestions (@QualityResult.Suggestions.Count)
                </h6>
                <ul class="list-unstyled mb-0" 
                    role="list"
                    aria-label="Quality improvement suggestions">
                    @foreach (var suggestion in QualityResult.Suggestions)
                    {
                        <li class="text-info small" role="listitem">
                            <i class="bi bi-arrow-right" aria-hidden="true"></i> @suggestion
                        </li>
                    }
                </ul>
            </div>
        }
        
        <!-- Summary for screen readers -->
        <div id="quality-summary" class="visually-hidden">
            @GetQualitySummaryForScreenReaders()
        </div>
    </div>
}

@code {
    [Parameter] public ImageQualityResult? QualityResult { get; set; }

    private string GetScoreColorClass(int score)
    {
        return score switch
        {
            >= 80 => "bg-success",
            >= 60 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private string GetScoreBadgeClass(int score)
    {
        return score switch
        {
            >= 80 => "bg-success",
            >= 60 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private string GetMetricBadgeClass(double score)
    {
        return score switch
        {
            >= 0.8 => "bg-success",
            >= 0.6 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private string GetMetricLabel(double score)
    {
        return score switch
        {
            >= 0.8 => "Good",
            >= 0.6 => "Fair",
            _ => "Poor"
        };
    }

    private string GetOverallQualityLabel(int score)
    {
        return score switch
        {
            >= 80 => "Good quality",
            >= 60 => "Fair quality", 
            _ => "Poor quality"
        };
    }

    private string GetQualityAnnouncement()
    {
        if (QualityResult == null) return "";
        
        var qualityLabel = GetOverallQualityLabel(QualityResult.OverallScore);
        var issueCount = QualityResult.Issues.Count;
        
        if (issueCount > 0)
        {
            return $"Image quality: {qualityLabel}. {issueCount} issue{(issueCount == 1 ? "" : "s")} found: {string.Join(", ", QualityResult.Issues)}";
        }
        
        return $"Image quality: {qualityLabel}";
    }

    private string GetQualitySummaryForScreenReaders()
    {
        if (QualityResult == null) return "";
        
        var summary = $"Overall quality score: {QualityResult.OverallScore}%. ";
        summary += $"Sharpness: {GetMetricLabel(QualityResult.BlurScore)}. ";
        summary += $"Lighting: {GetMetricLabel(QualityResult.LightingScore)}. ";
        summary += $"Edge detection: {GetMetricLabel(QualityResult.EdgeDetectionScore)}. ";
        
        if (QualityResult.HasIssues)
        {
            summary += $"{QualityResult.Issues.Count} issues detected. ";
        }
        
        if (QualityResult.Suggestions.Any())
        {
            summary += $"{QualityResult.Suggestions.Count} suggestions available.";
        }
        
        return summary;
    }
}