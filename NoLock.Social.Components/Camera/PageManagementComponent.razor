@namespace NoLock.Social.Components.Camera
@using NoLock.Social.Core.Camera.Interfaces
@using NoLock.Social.Core.Camera.Models
@using Microsoft.Extensions.Logging

@inject ICameraService CameraService
@inject ILogger<PageManagementComponent> Logger

<div class="page-management-container">
    @if (DocumentSession?.HasPages == true)
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-file-earmark-text"></i> 
                    Document Pages (@DocumentSession.TotalPages)
                </h5>
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <small class="text-danger">
                        <i class="bi bi-exclamation-triangle"></i> @_errorMessage
                    </small>
                }
            </div>
            
            <div class="card-body">
                <!-- Pages Grid -->
                <div class="row g-3">
                    @for (int i = 0; i < DocumentSession.Pages.Count; i++)
                    {
                        var pageIndex = i; // Capture for lambda
                        var page = DocumentSession.Pages[pageIndex];
                        var isCurrentPage = pageIndex == DocumentSession.CurrentPageIndex;
                        
                        <div class="col-6 col-md-4 col-lg-3">
                            <div class="page-thumbnail card @(isCurrentPage ? "border-primary" : "")">
                                <!-- Page Image -->
                                <div class="position-relative">
                                    <img src="@(page.ImageUrl)" 
                                         class="card-img-top" 
                                         alt="Page @(pageIndex + 1)"
                                         style="aspect-ratio: 3/4; object-fit: cover;" />
                                    
                                    <!-- Current Page Indicator -->
                                    @if (isCurrentPage)
                                    {
                                        <div class="position-absolute top-0 start-0 m-2">
                                            <span class="badge bg-primary">
                                                <i class="bi bi-eye"></i> Current
                                            </span>
                                        </div>
                                    }
                                    
                                    <!-- Page Number -->
                                    <div class="position-absolute bottom-0 end-0 m-2">
                                        <span class="badge bg-dark bg-opacity-75">
                                            Page @(pageIndex + 1)
                                        </span>
                                    </div>
                                </div>
                                
                                <!-- Page Controls -->
                                <div class="card-body p-2">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <!-- Reorder Controls -->
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button type="button" 
                                                    class="btn btn-outline-secondary"
                                                    @onclick="() => MovePageUp(pageIndex)"
                                                    disabled="@(pageIndex == 0 || _isProcessing)"
                                                    title="Move Up">
                                                <i class="bi bi-arrow-up"></i>
                                            </button>
                                            <button type="button" 
                                                    class="btn btn-outline-secondary"
                                                    @onclick="() => MovePageDown(pageIndex)"
                                                    disabled="@(pageIndex == DocumentSession.Pages.Count - 1 || _isProcessing)"
                                                    title="Move Down">
                                                <i class="bi bi-arrow-down"></i>
                                            </button>
                                        </div>
                                        
                                        <!-- Delete Button -->
                                        <button type="button" 
                                                class="btn btn-outline-danger btn-sm"
                                                @onclick="() => DeletePage(pageIndex)"
                                                disabled="@_isProcessing"
                                                title="Delete Page">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                @if (_isProcessing)
                {
                    <div class="text-center mt-3">
                        <div class="spinner-border spinner-border-sm me-2" role="status">
                            <span class="visually-hidden">Processing...</span>
                        </div>
                        <span class="text-muted">Processing...</span>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="text-center text-muted p-4">
            <i class="bi bi-file-earmark-plus fs-1 mb-3 d-block"></i>
            <h5>No Pages Yet</h5>
            <p class="mb-0">Capture your first page to start building your document.</p>
        </div>
    }
</div>

@code {
    [Parameter] public DocumentSession? DocumentSession { get; set; }
    [Parameter] public EventCallback<DocumentSession> OnSessionUpdated { get; set; }
    
    private bool _isProcessing;
    private string _errorMessage = "";
    
    private async Task MovePageUp(int fromIndex)
    {
        if (DocumentSession == null || fromIndex <= 0 || _isProcessing)
            return;
            
        await ReorderPages(fromIndex, fromIndex - 1);
    }
    
    private async Task MovePageDown(int fromIndex)
    {
        if (DocumentSession == null || fromIndex >= DocumentSession.Pages.Count - 1 || _isProcessing)
            return;
            
        await ReorderPages(fromIndex, fromIndex + 1);
    }
    
    private async Task ReorderPages(int fromIndex, int toIndex)
    {
        if (DocumentSession == null || _isProcessing)
            return;
            
        _isProcessing = true;
        _errorMessage = "";
        
        try
        {
            Logger.LogDebug("Reordering pages from {FromIndex} to {ToIndex}", fromIndex, toIndex);
            
            await CameraService.ReorderPagesInSessionAsync(DocumentSession.SessionId, fromIndex, toIndex);
            
            // Update local session state
            var page = DocumentSession.Pages[fromIndex];
            DocumentSession.Pages.RemoveAt(fromIndex);
            DocumentSession.Pages.Insert(toIndex, page);
            
            // Adjust current page index if needed
            if (DocumentSession.CurrentPageIndex == fromIndex)
            {
                DocumentSession.CurrentPageIndex = toIndex;
            }
            else if (fromIndex < DocumentSession.CurrentPageIndex && toIndex >= DocumentSession.CurrentPageIndex)
            {
                DocumentSession.CurrentPageIndex--;
            }
            else if (fromIndex > DocumentSession.CurrentPageIndex && toIndex <= DocumentSession.CurrentPageIndex)
            {
                DocumentSession.CurrentPageIndex++;
            }
            
            // Notify parent of changes
            if (OnSessionUpdated.HasDelegate)
            {
                await OnSessionUpdated.InvokeAsync(DocumentSession);
            }
            
            StateHasChanged();
            Logger.LogInformation("Successfully reordered page from {FromIndex} to {ToIndex}", fromIndex, toIndex);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error reordering pages from {FromIndex} to {ToIndex}", fromIndex, toIndex);
            _errorMessage = "Failed to reorder pages. Please try again.";
        }
        finally
        {
            _isProcessing = false;
        }
    }
    
    private async Task DeletePage(int pageIndex)
    {
        if (DocumentSession == null || _isProcessing || pageIndex < 0 || pageIndex >= DocumentSession.Pages.Count)
            return;
            
        _isProcessing = true;
        _errorMessage = "";
        
        try
        {
            Logger.LogDebug("Deleting page at index {PageIndex}", pageIndex);
            
            await CameraService.RemovePageFromSessionAsync(DocumentSession.SessionId, pageIndex);
            
            // Update local session state
            DocumentSession.Pages.RemoveAt(pageIndex);
            
            // Adjust current page index if needed
            if (DocumentSession.CurrentPageIndex >= pageIndex && DocumentSession.CurrentPageIndex > 0)
            {
                DocumentSession.CurrentPageIndex--;
            }
            else if (DocumentSession.CurrentPageIndex >= DocumentSession.Pages.Count)
            {
                DocumentSession.CurrentPageIndex = Math.Max(0, DocumentSession.Pages.Count - 1);
            }
            
            // Notify parent of changes
            if (OnSessionUpdated.HasDelegate)
            {
                await OnSessionUpdated.InvokeAsync(DocumentSession);
            }
            
            StateHasChanged();
            Logger.LogInformation("Successfully deleted page at index {PageIndex}", pageIndex);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting page at index {PageIndex}", pageIndex);
            _errorMessage = "Failed to delete page. Please try again.";
        }
        finally
        {
            _isProcessing = false;
        }
    }
}